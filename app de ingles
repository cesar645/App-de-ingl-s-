<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Aprenda InglÃªs</title>
<style>
  body {
    background-color: #121212;
    color: white;
    font-family: Arial, sans-serif;
    margin: 0; padding: 0; text-align: center;
  }
  h1 {
    margin: 20px 0;
  }
  #chat {
    max-width: 600px;
    height: 70vh;
    margin: 0 auto;
    padding: 15px;
    overflow-y: auto;
    background: #1E1E1E;
    border-radius: 8px;
    text-align: left;
  }
  .msg {
    background: #0D7377;
    padding: 10px;
    margin: 8px 0;
    border-radius: 6px;
    color: white;
  }
  .user {
    background: #14FFEC;
    color: black;
  }
  button {
    margin: 20px auto;
    background: #0D7377;
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    font-size: 28px;
    color: white;
    cursor: pointer;
  }
  button:active {
    background: #14FFEC;
    color: black;
  }
</style>
</head>
<body>
<h1>Aprenda InglÃªs com Voz</h1>
<div id="chat"></div>
<button id="micBtn">ðŸŽ¤</button>
<script>
  const API_KEY = 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; // Cole sua chave da OpenAI aqui

  const chatDiv = document.getElementById("chat");
  const micBtn = document.getElementById("micBtn");

  function addMessage(text, sender) {
    const div = document.createElement("div");
    div.className = "msg";
    if(sender) div.classList.add(sender);
    div.innerText = text;
    chatDiv.appendChild(div);
    chatDiv.scrollTop = chatDiv.scrollHeight;
  }

  async function sendMessage(userText) {
    addMessage(userText, "user");

    const prompt = `O usuÃ¡rio disse em inglÃªs: "${userText}". Avalie a pronÃºncia, explique onde errou em portuguÃªs e dÃª a frase correta em inglÃªs.`;

    try {
      const response = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }]
        })
      });

      const data = await response.json();
      const feedback = data.choices[0].message.content;
      addMessage(feedback, "bot");
      speak(feedback);
    } catch(err) {
      addMessage("Erro: " + err.message, "bot");
    }
  }

  function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "pt-BR";
    speechSynthesis.speak(utterance);
  }

  micBtn.addEventListener("click", () => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if(!SpeechRecognition){
      alert("Seu navegador nÃ£o suporta reconhecimento de voz.");
      return;
    }
    const recognition = new SpeechRecognition();
    recognition.lang = "en-US";
    recognition.start();

    recognition.onresult = (event) => {
      const text = event.results[0][0].transcript;
      sendMessage(text);
    };
    recognition.onerror = (event) => {
      alert("Erro no reconhecimento de voz: " + event.error);
    };
  });
</script>
</body>
</html>
